// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v6.33.0
// source: actions.proto

package contracts

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RiskValidator_ValidateSignal_FullMethodName = "/trading.contracts.RiskValidator/ValidateSignal"
)

// RiskValidatorClient is the client API for RiskValidator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RiskValidatorClient interface {
	ValidateSignal(ctx context.Context, in *TradingSignal, opts ...grpc.CallOption) (*SignalValidationResponse, error)
}

type riskValidatorClient struct {
	cc grpc.ClientConnInterface
}

func NewRiskValidatorClient(cc grpc.ClientConnInterface) RiskValidatorClient {
	return &riskValidatorClient{cc}
}

func (c *riskValidatorClient) ValidateSignal(ctx context.Context, in *TradingSignal, opts ...grpc.CallOption) (*SignalValidationResponse, error) {
	out := new(SignalValidationResponse)
	err := c.cc.Invoke(ctx, RiskValidator_ValidateSignal_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RiskValidatorServer is the server API for RiskValidator service.
// All implementations must embed UnimplementedRiskValidatorServer
// for forward compatibility
type RiskValidatorServer interface {
	ValidateSignal(context.Context, *TradingSignal) (*SignalValidationResponse, error)
	mustEmbedUnimplementedRiskValidatorServer()
}

// UnimplementedRiskValidatorServer must be embedded to have forward compatible implementations.
type UnimplementedRiskValidatorServer struct {
}

func (UnimplementedRiskValidatorServer) ValidateSignal(context.Context, *TradingSignal) (*SignalValidationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateSignal not implemented")
}
func (UnimplementedRiskValidatorServer) mustEmbedUnimplementedRiskValidatorServer() {}

// UnsafeRiskValidatorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RiskValidatorServer will
// result in compilation errors.
type UnsafeRiskValidatorServer interface {
	mustEmbedUnimplementedRiskValidatorServer()
}

func RegisterRiskValidatorServer(s grpc.ServiceRegistrar, srv RiskValidatorServer) {
	s.RegisterService(&RiskValidator_ServiceDesc, srv)
}

func _RiskValidator_ValidateSignal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TradingSignal)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RiskValidatorServer).ValidateSignal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RiskValidator_ValidateSignal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RiskValidatorServer).ValidateSignal(ctx, req.(*TradingSignal))
	}
	return interceptor(ctx, in, info, handler)
}

// RiskValidator_ServiceDesc is the grpc.ServiceDesc for RiskValidator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RiskValidator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "trading.contracts.RiskValidator",
	HandlerType: (*RiskValidatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ValidateSignal",
			Handler:    _RiskValidator_ValidateSignal_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "actions.proto",
}

const (
	OrderExecutor_ExecuteOrder_FullMethodName = "/trading.contracts.OrderExecutor/ExecuteOrder"
)

// OrderExecutorClient is the client API for OrderExecutor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrderExecutorClient interface {
	ExecuteOrder(ctx context.Context, in *OrderRequest, opts ...grpc.CallOption) (*OrderSubmissionResponse, error)
}

type orderExecutorClient struct {
	cc grpc.ClientConnInterface
}

func NewOrderExecutorClient(cc grpc.ClientConnInterface) OrderExecutorClient {
	return &orderExecutorClient{cc}
}

func (c *orderExecutorClient) ExecuteOrder(ctx context.Context, in *OrderRequest, opts ...grpc.CallOption) (*OrderSubmissionResponse, error) {
	out := new(OrderSubmissionResponse)
	err := c.cc.Invoke(ctx, OrderExecutor_ExecuteOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrderExecutorServer is the server API for OrderExecutor service.
// All implementations must embed UnimplementedOrderExecutorServer
// for forward compatibility
type OrderExecutorServer interface {
	ExecuteOrder(context.Context, *OrderRequest) (*OrderSubmissionResponse, error)
	mustEmbedUnimplementedOrderExecutorServer()
}

// UnimplementedOrderExecutorServer must be embedded to have forward compatible implementations.
type UnimplementedOrderExecutorServer struct {
}

func (UnimplementedOrderExecutorServer) ExecuteOrder(context.Context, *OrderRequest) (*OrderSubmissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteOrder not implemented")
}
func (UnimplementedOrderExecutorServer) mustEmbedUnimplementedOrderExecutorServer() {}

// UnsafeOrderExecutorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrderExecutorServer will
// result in compilation errors.
type UnsafeOrderExecutorServer interface {
	mustEmbedUnimplementedOrderExecutorServer()
}

func RegisterOrderExecutorServer(s grpc.ServiceRegistrar, srv OrderExecutorServer) {
	s.RegisterService(&OrderExecutor_ServiceDesc, srv)
}

func _OrderExecutor_ExecuteOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderExecutorServer).ExecuteOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderExecutor_ExecuteOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderExecutorServer).ExecuteOrder(ctx, req.(*OrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrderExecutor_ServiceDesc is the grpc.ServiceDesc for OrderExecutor service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrderExecutor_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "trading.contracts.OrderExecutor",
	HandlerType: (*OrderExecutorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExecuteOrder",
			Handler:    _OrderExecutor_ExecuteOrder_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "actions.proto",
}
